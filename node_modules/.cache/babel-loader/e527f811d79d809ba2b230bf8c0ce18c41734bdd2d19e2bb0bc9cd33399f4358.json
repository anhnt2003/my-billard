{"ast":null,"code":"var _jsxFileName = \"/Users/mac/work space /my-billard/src/components/ScoreTracker.tsx\",\n  _s = $RefreshSig$();\nimport './ScoreTracker.css';\nimport React, { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ScoreTracker = ({\n  players,\n  onScoreUpdate\n}) => {\n  _s();\n  const [roundScores, setRoundScores] = useState({});\n  const [currentRound, setCurrentRound] = useState(1);\n  const [history, setHistory] = useState([]);\n  const [editingRound, setEditingRound] = useState(null);\n  const [editScores, setEditScores] = useState({});\n\n  // Load saved game data from localStorage on component mount\n  useEffect(() => {\n    const savedGame = localStorage.getItem('billardGame');\n    if (savedGame) {\n      try {\n        var _gameData$rounds;\n        const gameData = JSON.parse(savedGame);\n        setHistory(gameData.rounds || []);\n        setCurrentRound((((_gameData$rounds = gameData.rounds) === null || _gameData$rounds === void 0 ? void 0 : _gameData$rounds.length) || 0) + 1);\n        if (gameData.players) {\n          onScoreUpdate(gameData.players);\n        }\n        toast.info('Previous game loaded successfully');\n      } catch (error) {\n        toast.error('Error loading saved game');\n        console.error('Error loading saved game:', error);\n      }\n    }\n  }, []);\n  const handleScoreChange = (playerId, value) => {\n    setRoundScores(prev => ({\n      ...prev,\n      [playerId]: value\n    }));\n  };\n  const handleEditScoreChange = (playerId, value) => {\n    setEditScores(prev => ({\n      ...prev,\n      [playerId]: value\n    }));\n  };\n  const saveGameToLocalStorage = () => {\n    const gameData = {\n      players: players,\n      rounds: history,\n      lastUpdate: new Date().toISOString()\n    };\n    try {\n      localStorage.setItem('billardGame', JSON.stringify(gameData));\n      toast.success('Game saved successfully!');\n    } catch (error) {\n      toast.error('Error saving game');\n      console.error('Error saving game:', error);\n    }\n  };\n  const clearSavedGame = () => {\n    try {\n      localStorage.removeItem('billardGame');\n      setHistory([]);\n      setCurrentRound(1);\n      onScoreUpdate(players.map(player => ({\n        ...player,\n        totalScore: 0\n      })));\n      toast.success('Game cleared successfully!');\n    } catch (error) {\n      toast.error('Error clearing game');\n      console.error('Error clearing game:', error);\n    }\n  };\n  const submitScores = () => {\n    // Check if any scores are entered\n    const hasScores = Object.values(roundScores).some(score => score !== '');\n    if (!hasScores) {\n      toast.error('Please enter at least one score before submitting');\n      return;\n    }\n    const roundData = {\n      roundNumber: currentRound,\n      scores: []\n    };\n    const updatedPlayers = players.map(player => {\n      const roundScore = parseInt(roundScores[player.id] || '0') || 0;\n      const newTotalScore = player.totalScore + roundScore;\n      roundData.scores.push({\n        playerId: player.id,\n        playerName: player.name,\n        roundScore: roundScore,\n        totalScore: newTotalScore\n      });\n      return {\n        ...player,\n        totalScore: newTotalScore\n      };\n    });\n\n    // Update history with the new round\n    setHistory(prev => [...prev, roundData]);\n\n    // Update current round number\n    setCurrentRound(prev => prev + 1);\n\n    // Update parent component with new player scores\n    onScoreUpdate(updatedPlayers);\n\n    // Reset round scores\n    setRoundScores({});\n\n    // Show success message with round summary\n    const roundSummary = roundData.scores.map(score => `${score.playerName}: ${score.roundScore >= 0 ? '+' : ''}${score.roundScore}`).join(', ');\n    toast.success(`Round ${currentRound} completed: ${roundSummary}`);\n  };\n  const handleUndoLastRound = () => {\n    if (history.length === 0) {\n      toast.error('No rounds to undo');\n      return;\n    }\n\n    // Get the last round\n    const lastRound = history[history.length - 1];\n\n    // Revert player scores\n    const revertedPlayers = players.map(player => {\n      const lastRoundScore = lastRound.scores.find(s => s.playerId === player.id);\n      return {\n        ...player,\n        totalScore: player.totalScore - ((lastRoundScore === null || lastRoundScore === void 0 ? void 0 : lastRoundScore.roundScore) || 0)\n      };\n    });\n\n    // Update history and current round\n    setHistory(prev => prev.slice(0, -1));\n    setCurrentRound(prev => prev - 1);\n\n    // Update parent component with reverted scores\n    onScoreUpdate(revertedPlayers);\n\n    // Show success message\n    toast.success('Last round undone successfully');\n  };\n  const startEditingRound = roundNumber => {\n    setEditingRound(roundNumber);\n    const round = history.find(r => r.roundNumber === roundNumber);\n    if (round) {\n      const initialEditScores = round.scores.reduce((acc, score) => ({\n        ...acc,\n        [score.playerId]: score.roundScore.toString()\n      }), {});\n      setEditScores(initialEditScores);\n    }\n  };\n  const saveRoundEdit = roundNumber => {\n    const round = history.find(r => r.roundNumber === roundNumber);\n    if (!round) return;\n\n    // Calculate the difference in scores\n    const updatedPlayers = players.map(player => {\n      var _round$scores$find;\n      const oldScore = ((_round$scores$find = round.scores.find(s => s.playerId === player.id)) === null || _round$scores$find === void 0 ? void 0 : _round$scores$find.roundScore) || 0;\n      const newScore = parseInt(editScores[player.id] || '0') || 0;\n      const scoreDiff = newScore - oldScore;\n      return {\n        ...player,\n        totalScore: player.totalScore + scoreDiff\n      };\n    });\n\n    // Update the round in history\n    const updatedRound = {\n      ...round,\n      scores: round.scores.map(score => {\n        var _updatedPlayers$find;\n        return {\n          ...score,\n          roundScore: parseInt(editScores[score.playerId] || '0') || 0,\n          totalScore: ((_updatedPlayers$find = updatedPlayers.find(p => p.id === score.playerId)) === null || _updatedPlayers$find === void 0 ? void 0 : _updatedPlayers$find.totalScore) || 0\n        };\n      })\n    };\n    setHistory(prev => prev.map(r => r.roundNumber === roundNumber ? updatedRound : r));\n    onScoreUpdate(updatedPlayers);\n    setEditingRound(null);\n    setEditScores({});\n    toast.success(`Round ${roundNumber} updated successfully`);\n  };\n  const cancelEdit = () => {\n    setEditingRound(null);\n    setEditScores({});\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"score-tracker\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"round-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Round \", currentRound]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"round-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-game-button\",\n          onClick: saveGameToLocalStorage,\n          children: \"Save Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), history.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"undo-button\",\n            onClick: handleUndoLastRound,\n            children: \"Undo Last Round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"clear-game-button\",\n            onClick: clearSavedGame,\n            children: \"Clear Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-inputs\",\n      children: players.map(player => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"player-name\",\n            children: player.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"total-score\",\n            children: [\"Total: \", player.totalScore]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score-input\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: roundScores[player.id] || '',\n            onChange: e => handleScoreChange(player.id, e.target.value),\n            placeholder: \"Enter score\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this)]\n      }, player.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-scores\",\n      onClick: submitScores,\n      children: [\"Submit Round \", currentRound, \" Scores\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), history.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"round-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Round History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history-list\",\n        children: history.map(round => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"history-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"history-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"Round \", round.roundNumber]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 19\n            }, this), editingRound === round.roundNumber ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"edit-controls\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"save-edit-button\",\n                onClick: () => saveRoundEdit(round.roundNumber),\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"cancel-edit-button\",\n                onClick: cancelEdit,\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"edit-button\",\n              onClick: () => startEditingRound(round.roundNumber),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"round-scores\",\n            children: round.scores.map(score => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-round-score\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"player-name\",\n                children: score.playerName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 23\n              }, this), editingRound === round.roundNumber ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: editScores[score.playerId] || '',\n                onChange: e => handleEditScoreChange(score.playerId, e.target.value),\n                className: \"edit-score-input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 25\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"score-change\",\n                children: [score.roundScore >= 0 ? '+' : '', score.roundScore]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"round-total\",\n                children: [\"= \", score.totalScore]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 23\n              }, this)]\n            }, score.playerId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 17\n          }, this)]\n        }, round.roundNumber, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n_s(ScoreTracker, \"qMJn3DLUNyBpqJPHNdkZbzI6FG0=\");\n_c = ScoreTracker;\nexport default ScoreTracker;\nvar _c;\n$RefreshReg$(_c, \"ScoreTracker\");","map":{"version":3,"names":["React","useEffect","useState","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","ScoreTracker","players","onScoreUpdate","_s","roundScores","setRoundScores","currentRound","setCurrentRound","history","setHistory","editingRound","setEditingRound","editScores","setEditScores","savedGame","localStorage","getItem","_gameData$rounds","gameData","JSON","parse","rounds","length","info","error","console","handleScoreChange","playerId","value","prev","handleEditScoreChange","saveGameToLocalStorage","lastUpdate","Date","toISOString","setItem","stringify","success","clearSavedGame","removeItem","map","player","totalScore","submitScores","hasScores","Object","values","some","score","roundData","roundNumber","scores","updatedPlayers","roundScore","parseInt","id","newTotalScore","push","playerName","name","roundSummary","join","handleUndoLastRound","lastRound","revertedPlayers","lastRoundScore","find","s","slice","startEditingRound","round","r","initialEditScores","reduce","acc","toString","saveRoundEdit","_round$scores$find","oldScore","newScore","scoreDiff","updatedRound","_updatedPlayers$find","p","cancelEdit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/mac/work space /my-billard/src/components/ScoreTracker.tsx"],"sourcesContent":["import './ScoreTracker.css';\n\nimport React, {\n  useEffect,\n  useState,\n} from 'react';\n\nimport { toast } from 'react-toastify';\n\nimport { RoundHistory } from '../types/RoundHistory';\nimport { ScoreTrackerProps } from '../types/ScoreTrackerProps';\n\nconst ScoreTracker: React.FC<ScoreTrackerProps> = ({ players, onScoreUpdate }) => {\n  const [roundScores, setRoundScores] = useState<{ [key: number]: string }>({});\n  const [currentRound, setCurrentRound] = useState<number>(1);\n  const [history, setHistory] = useState<RoundHistory[]>([]);\n  const [editingRound, setEditingRound] = useState<number | null>(null);\n  const [editScores, setEditScores] = useState<{ [key: number]: string }>({});\n\n  // Load saved game data from localStorage on component mount\n  useEffect(() => {\n    const savedGame = localStorage.getItem('billardGame');\n    if (savedGame) {\n      try {\n        const gameData = JSON.parse(savedGame);\n        setHistory(gameData.rounds || []);\n        setCurrentRound((gameData.rounds?.length || 0) + 1);\n        if (gameData.players) {\n          onScoreUpdate(gameData.players);\n        }\n        toast.info('Previous game loaded successfully');\n      } catch (error) {\n        toast.error('Error loading saved game');\n        console.error('Error loading saved game:', error);\n      }\n    }\n  }, []);\n\n  const handleScoreChange = (playerId: number, value: string) => {\n    setRoundScores(prev => ({\n      ...prev,\n      [playerId]: value\n    }));\n  };\n\n  const handleEditScoreChange = (playerId: number, value: string) => {\n    setEditScores(prev => ({\n      ...prev,\n      [playerId]: value\n    }));\n  };\n\n  const saveGameToLocalStorage = () => {\n    const gameData = {\n      players: players,\n      rounds: history,\n      lastUpdate: new Date().toISOString()\n    };\n\n    try {\n      localStorage.setItem('billardGame', JSON.stringify(gameData));\n      toast.success('Game saved successfully!');\n    } catch (error) {\n      toast.error('Error saving game');\n      console.error('Error saving game:', error);\n    }\n  };\n\n  const clearSavedGame = () => {\n    try {\n      localStorage.removeItem('billardGame');\n      setHistory([]);\n      setCurrentRound(1);\n      onScoreUpdate(players.map(player => ({ ...player, totalScore: 0 })));\n      toast.success('Game cleared successfully!');\n    } catch (error) {\n      toast.error('Error clearing game');\n      console.error('Error clearing game:', error);\n    }\n  };\n\n  const submitScores = () => {\n    // Check if any scores are entered\n    const hasScores = Object.values(roundScores).some(score => score !== '');\n    if (!hasScores) {\n      toast.error('Please enter at least one score before submitting');\n      return;\n    }\n\n    const roundData: RoundHistory = {\n      roundNumber: currentRound,\n      scores: []\n    };\n\n    const updatedPlayers = players.map(player => {\n      const roundScore = parseInt(roundScores[player.id] || '0') || 0;\n      const newTotalScore = player.totalScore + roundScore;\n      \n      roundData.scores.push({\n        playerId: player.id,\n        playerName: player.name,\n        roundScore: roundScore,\n        totalScore: newTotalScore\n      });\n\n      return {\n        ...player,\n        totalScore: newTotalScore\n      };\n    });\n\n    // Update history with the new round\n    setHistory(prev => [...prev, roundData]);\n    \n    // Update current round number\n    setCurrentRound(prev => prev + 1);\n    \n    // Update parent component with new player scores\n    onScoreUpdate(updatedPlayers);\n    \n    // Reset round scores\n    setRoundScores({});\n    \n    // Show success message with round summary\n    const roundSummary = roundData.scores\n      .map(score => `${score.playerName}: ${score.roundScore >= 0 ? '+' : ''}${score.roundScore}`)\n      .join(', ');\n    toast.success(`Round ${currentRound} completed: ${roundSummary}`);\n  };\n\n  const handleUndoLastRound = () => {\n    if (history.length === 0) {\n      toast.error('No rounds to undo');\n      return;\n    }\n\n    // Get the last round\n    const lastRound = history[history.length - 1];\n    \n    // Revert player scores\n    const revertedPlayers = players.map(player => {\n      const lastRoundScore = lastRound.scores.find(s => s.playerId === player.id);\n      return {\n        ...player,\n        totalScore: player.totalScore - (lastRoundScore?.roundScore || 0)\n      };\n    });\n\n    // Update history and current round\n    setHistory(prev => prev.slice(0, -1));\n    setCurrentRound(prev => prev - 1);\n    \n    // Update parent component with reverted scores\n    onScoreUpdate(revertedPlayers);\n    \n    // Show success message\n    toast.success('Last round undone successfully');\n  };\n\n  const startEditingRound = (roundNumber: number) => {\n    setEditingRound(roundNumber);\n    const round = history.find(r => r.roundNumber === roundNumber);\n    if (round) {\n      const initialEditScores = round.scores.reduce((acc, score) => ({\n        ...acc,\n        [score.playerId]: score.roundScore.toString()\n      }), {});\n      setEditScores(initialEditScores);\n    }\n  };\n\n  const saveRoundEdit = (roundNumber: number) => {\n    const round = history.find(r => r.roundNumber === roundNumber);\n    if (!round) return;\n\n    // Calculate the difference in scores\n    const updatedPlayers = players.map(player => {\n      const oldScore = round.scores.find(s => s.playerId === player.id)?.roundScore || 0;\n      const newScore = parseInt(editScores[player.id] || '0') || 0;\n      const scoreDiff = newScore - oldScore;\n      \n      return {\n        ...player,\n        totalScore: player.totalScore + scoreDiff\n      };\n    });\n\n    // Update the round in history\n    const updatedRound: RoundHistory = {\n      ...round,\n      scores: round.scores.map(score => ({\n        ...score,\n        roundScore: parseInt(editScores[score.playerId] || '0') || 0,\n        totalScore: updatedPlayers.find(p => p.id === score.playerId)?.totalScore || 0\n      }))\n    };\n\n    setHistory(prev => prev.map(r => r.roundNumber === roundNumber ? updatedRound : r));\n    onScoreUpdate(updatedPlayers);\n    setEditingRound(null);\n    setEditScores({});\n    toast.success(`Round ${roundNumber} updated successfully`);\n  };\n\n  const cancelEdit = () => {\n    setEditingRound(null);\n    setEditScores({});\n  };\n\n  return (\n    <div className=\"score-tracker\">\n      <div className=\"round-info\">\n        <h2>Round {currentRound}</h2>\n        <div className=\"round-controls\">\n          <button \n            className=\"save-game-button\"\n            onClick={saveGameToLocalStorage}\n          >\n            Save Game\n          </button>\n          {history.length > 0 && (\n            <>\n              <button \n                className=\"undo-button\"\n                onClick={handleUndoLastRound}\n              >\n                Undo Last Round\n              </button>\n              <button \n                className=\"clear-game-button\"\n                onClick={clearSavedGame}\n              >\n                Clear Game\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"score-inputs\">\n        {players.map(player => (\n          <div key={player.id} className=\"score-input-group\">\n            <div className=\"player-info\">\n              <span className=\"player-name\">{player.name}</span>\n              <span className=\"total-score\">Total: {player.totalScore}</span>\n            </div>\n            <div className=\"score-input\">\n              <input\n                type=\"number\"\n                value={roundScores[player.id] || ''}\n                onChange={(e) => handleScoreChange(player.id, e.target.value)}\n                placeholder=\"Enter score\"\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <button \n        className=\"submit-scores\"\n        onClick={submitScores}\n      >\n        Submit Round {currentRound} Scores\n      </button>\n\n      {history.length > 0 && (\n        <div className=\"round-history\">\n          <h3>Round History</h3>\n          <div className=\"history-list\">\n            {history.map((round) => (\n              <div key={round.roundNumber} className=\"history-item\">\n                <div className=\"history-header\">\n                  <h4>Round {round.roundNumber}</h4>\n                  {editingRound === round.roundNumber ? (\n                    <div className=\"edit-controls\">\n                      <button \n                        className=\"save-edit-button\"\n                        onClick={() => saveRoundEdit(round.roundNumber)}\n                      >\n                        Save\n                      </button>\n                      <button \n                        className=\"cancel-edit-button\"\n                        onClick={cancelEdit}\n                      >\n                        Cancel\n                      </button>\n                    </div>\n                  ) : (\n                    <button \n                      className=\"edit-button\"\n                      onClick={() => startEditingRound(round.roundNumber)}\n                    >\n                      Edit\n                    </button>\n                  )}\n                </div>\n                <div className=\"round-scores\">\n                  {round.scores.map((score) => (\n                    <div key={score.playerId} className=\"player-round-score\">\n                      <span className=\"player-name\">{score.playerName}</span>\n                      {editingRound === round.roundNumber ? (\n                        <input\n                          type=\"number\"\n                          value={editScores[score.playerId] || ''}\n                          onChange={(e) => handleEditScoreChange(score.playerId, e.target.value)}\n                          className=\"edit-score-input\"\n                        />\n                      ) : (\n                        <span className=\"score-change\">\n                          {score.roundScore >= 0 ? '+' : ''}{score.roundScore}\n                        </span>\n                      )}\n                      <span className=\"round-total\">= {score.totalScore}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ScoreTracker; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}