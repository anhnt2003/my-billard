{"ast":null,"code":"var _GameService;\nclass GameService {\n  constructor() {\n    this.gameData = {\n      players: [],\n      rounds: [],\n      lastUpdate: new Date().toISOString()\n    };\n  }\n  static getInstance() {\n    if (!GameService.instance) {\n      GameService.instance = new GameService();\n    }\n    return GameService.instance;\n  }\n  async loadGameData() {\n    try {\n      const response = await fetch('/api/game-data');\n      if (!response.ok) {\n        throw new Error('Failed to load game data');\n      }\n      this.gameData = await response.json();\n      return this.gameData;\n    } catch (error) {\n      console.error('Error loading game data:', error);\n      return this.gameData;\n    }\n  }\n  async saveGameData(players, rounds) {\n    try {\n      const gameData = {\n        players,\n        rounds,\n        lastUpdate: new Date().toISOString()\n      };\n      const response = await fetch('/api/game-data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(gameData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to save game data');\n      }\n      this.gameData = gameData;\n      return true;\n    } catch (error) {\n      console.error('Error saving game data:', error);\n      return false;\n    }\n  }\n  async updateRound(round) {\n    try {\n      const response = await fetch('/api/game-data/round', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(round)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update round data');\n      }\n      return true;\n    } catch (error) {\n      console.error('Error updating round:', error);\n      return false;\n    }\n  }\n}\n_GameService = GameService;\nGameService.instance = void 0;\nexport const gameService = GameService.getInstance();","map":{"version":3,"names":["GameService","constructor","gameData","players","rounds","lastUpdate","Date","toISOString","getInstance","instance","loadGameData","response","fetch","ok","Error","json","error","console","saveGameData","method","headers","body","JSON","stringify","updateRound","round","_GameService","gameService"],"sources":["/Users/mac/work space /my-billard/src/services/gameService.ts"],"sourcesContent":["import {\n  Player,\n  RoundHistory,\n} from '../types/gameTypes';\n\ninterface GameData {\n  players: Player[];\n  rounds: RoundHistory[];\n  lastUpdate: string;\n}\n\nclass GameService {\n  private static instance: GameService;\n  private gameData: GameData = {\n    players: [],\n    rounds: [],\n    lastUpdate: new Date().toISOString()\n  };\n\n  private constructor() {}\n\n  public static getInstance(): GameService {\n    if (!GameService.instance) {\n      GameService.instance = new GameService();\n    }\n    return GameService.instance;\n  }\n\n  public async loadGameData(): Promise<GameData> {\n    try {\n      const response = await fetch('/api/game-data');\n      if (!response.ok) {\n        throw new Error('Failed to load game data');\n      }\n      this.gameData = await response.json();\n      return this.gameData;\n    } catch (error) {\n      console.error('Error loading game data:', error);\n      return this.gameData;\n    }\n  }\n\n  public async saveGameData(players: Player[], rounds: RoundHistory[]): Promise<boolean> {\n    try {\n      const gameData: GameData = {\n        players,\n        rounds,\n        lastUpdate: new Date().toISOString()\n      };\n\n      const response = await fetch('/api/game-data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(gameData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save game data');\n      }\n\n      this.gameData = gameData;\n      return true;\n    } catch (error) {\n      console.error('Error saving game data:', error);\n      return false;\n    }\n  }\n\n  public async updateRound(round: RoundHistory): Promise<boolean> {\n    try {\n      const response = await fetch('/api/game-data/round', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(round)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update round data');\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error updating round:', error);\n      return false;\n    }\n  }\n}\n\nexport const gameService = GameService.getInstance(); "],"mappings":";AAWA,MAAMA,WAAW,CAAC;EAQRC,WAAWA,CAAA,EAAG;IAAA,KANdC,QAAQ,GAAa;MAC3BC,OAAO,EAAE,EAAE;MACXC,MAAM,EAAE,EAAE;MACVC,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACrC,CAAC;EAEsB;EAEvB,OAAcC,WAAWA,CAAA,EAAgB;IACvC,IAAI,CAACR,WAAW,CAACS,QAAQ,EAAE;MACzBT,WAAW,CAACS,QAAQ,GAAG,IAAIT,WAAW,CAAC,CAAC;IAC1C;IACA,OAAOA,WAAW,CAACS,QAAQ;EAC7B;EAEA,MAAaC,YAAYA,CAAA,EAAsB;IAC7C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAgB,CAAC;MAC9C,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MACA,IAAI,CAACZ,QAAQ,GAAG,MAAMS,QAAQ,CAACI,IAAI,CAAC,CAAC;MACrC,OAAO,IAAI,CAACb,QAAQ;IACtB,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO,IAAI,CAACd,QAAQ;IACtB;EACF;EAEA,MAAagB,YAAYA,CAACf,OAAiB,EAAEC,MAAsB,EAAoB;IACrF,IAAI;MACF,MAAMF,QAAkB,GAAG;QACzBC,OAAO;QACPC,MAAM;QACNC,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrC,CAAC;MAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAgB,EAAE;QAC7CO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACrB,QAAQ;MAC/B,CAAC,CAAC;MAEF,IAAI,CAACS,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MAEA,IAAI,CAACZ,QAAQ,GAAGA,QAAQ;MACxB,OAAO,IAAI;IACb,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO,KAAK;IACd;EACF;EAEA,MAAaQ,WAAWA,CAACC,KAAmB,EAAoB;IAC9D,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,sBAAsB,EAAE;QACnDO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,KAAK;MAC5B,CAAC,CAAC;MAEF,IAAI,CAACd,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,KAAK;IACd;EACF;AACF;AAACU,YAAA,GA/EK1B,WAAW;AAAXA,WAAW,CACAS,QAAQ;AAgFzB,OAAO,MAAMkB,WAAW,GAAG3B,WAAW,CAACQ,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}