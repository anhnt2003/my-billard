{"ast":null,"code":"const GAME_DATA_FILE = 'gameData.json';\nexport const saveGameData = async (players, rounds) => {\n  const gameData = {\n    players,\n    rounds,\n    lastUpdate: new Date().toISOString()\n  };\n  try {\n    const response = await fetch('/api/saveGame', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(gameData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to save game data');\n    }\n  } catch (error) {\n    console.error('Error saving game data:', error);\n    throw error;\n  }\n};\nexport const loadGameData = async () => {\n  try {\n    const response = await fetch('/api/loadGame');\n    if (!response.ok) {\n      throw new Error('Failed to load game data');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error loading game data:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["GAME_DATA_FILE","saveGameData","players","rounds","gameData","lastUpdate","Date","toISOString","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console","loadGameData","json"],"sources":["/Users/mac/work space /my-billard/src/services/gameDataService.ts"],"sourcesContent":["import {\n  Player,\n  RoundHistory,\n} from '../types/gameTypes';\n\ninterface GameData {\n  players: Player[];\n  rounds: RoundHistory[];\n  lastUpdate: string;\n}\n\nconst GAME_DATA_FILE = 'gameData.json';\n\nexport const saveGameData = async (players: Player[], rounds: RoundHistory[]) => {\n  const gameData: GameData = {\n    players,\n    rounds,\n    lastUpdate: new Date().toISOString()\n  };\n\n  try {\n    const response = await fetch('/api/saveGame', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(gameData)\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to save game data');\n    }\n  } catch (error) {\n    console.error('Error saving game data:', error);\n    throw error;\n  }\n};\n\nexport const loadGameData = async (): Promise<GameData | null> => {\n  try {\n    const response = await fetch('/api/loadGame');\n    if (!response.ok) {\n      throw new Error('Failed to load game data');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error loading game data:', error);\n    return null;\n  }\n}; "],"mappings":"AAWA,MAAMA,cAAc,GAAG,eAAe;AAEtC,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,OAAiB,EAAEC,MAAsB,KAAK;EAC/E,MAAMC,QAAkB,GAAG;IACzBF,OAAO;IACPC,MAAM;IACNE,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACrC,CAAC;EAED,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,EAAE;MAC5CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,QAAQ;IAC/B,CAAC,CAAC;IAEF,IAAI,CAACI,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAsC;EAChE,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,CAAC;IAC7C,IAAI,CAACD,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IACA,OAAO,MAAMR,QAAQ,CAACY,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}