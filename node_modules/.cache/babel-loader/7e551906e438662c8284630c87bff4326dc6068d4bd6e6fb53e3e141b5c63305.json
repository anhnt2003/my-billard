{"ast":null,"code":"const STORAGE_KEY = 'billard_game_data';\nexport const saveGameData = async data => {\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n  } catch (error) {\n    console.error('Error saving game data:', error);\n  }\n};\nexport const loadGameData = async () => {\n  try {\n    const data = localStorage.getItem(STORAGE_KEY);\n    return data ? JSON.parse(data) : null;\n  } catch (error) {\n    console.error('Error loading game data:', error);\n    return null;\n  }\n};\nexport const clearGameData = async () => {\n  try {\n    localStorage.removeItem(STORAGE_KEY);\n  } catch (error) {\n    console.error('Error clearing game data:', error);\n  }\n};","map":{"version":3,"names":["STORAGE_KEY","saveGameData","data","localStorage","setItem","JSON","stringify","error","console","loadGameData","getItem","parse","clearGameData","removeItem"],"sources":["/Users/mac/work space /my-billard/src/services/gameDataService.ts"],"sourcesContent":["export interface GameData {\n  players: Player[];\n  rounds: RoundHistory[];\n  lastUpdate: string;\n}\n\nexport interface Player {\n  id: number;\n  name: string;\n  totalScore: number;\n}\n\nexport interface RoundHistory {\n  roundNumber: number;\n  scores: {\n    playerId: number;\n    playerName: string;\n    roundScore: number;\n    totalScore: number;\n  }[];\n}\n\nconst STORAGE_KEY = 'billard_game_data';\n\nexport const saveGameData = async (data: GameData): Promise<void> => {\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n  } catch (error) {\n    console.error('Error saving game data:', error);\n  }\n};\n\nexport const loadGameData = async (): Promise<GameData | null> => {\n  try {\n    const data = localStorage.getItem(STORAGE_KEY);\n    return data ? JSON.parse(data) : null;\n  } catch (error) {\n    console.error('Error loading game data:', error);\n    return null;\n  }\n};\n\nexport const clearGameData = async (): Promise<void> => {\n  try {\n    localStorage.removeItem(STORAGE_KEY);\n  } catch (error) {\n    console.error('Error clearing game data:', error);\n  }\n}; "],"mappings":"AAsBA,MAAMA,WAAW,GAAG,mBAAmB;AAEvC,OAAO,MAAMC,YAAY,GAAG,MAAOC,IAAc,IAAoB;EACnE,IAAI;IACFC,YAAY,CAACC,OAAO,CAACJ,WAAW,EAAEK,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;EACzD,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;EACjD;AACF,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAsC;EAChE,IAAI;IACF,MAAMP,IAAI,GAAGC,YAAY,CAACO,OAAO,CAACV,WAAW,CAAC;IAC9C,OAAOE,IAAI,GAAGG,IAAI,CAACM,KAAK,CAACT,IAAI,CAAC,GAAG,IAAI;EACvC,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAMK,aAAa,GAAG,MAAAA,CAAA,KAA2B;EACtD,IAAI;IACFT,YAAY,CAACU,UAAU,CAACb,WAAW,CAAC;EACtC,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;EACnD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}